{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar time_1 = require(\"./time\");\nfunction isDnf(result) {\n  return result === -1;\n}\nexports.isDnf = isDnf;\nfunction isDns(result) {\n  return result === -2;\n}\nexports.isDns = isDns;\nfunction isMultiResult(result) {\n  // Formatted as a base 10 string, a multi result will always have 8 or 9 digits.\n  // New style mbld has an implied 0 at the beginning which is not included in the length\n  return [9, 10].indexOf(result.toString().length) > -1;\n}\nexports.isMultiResult = isMultiResult;\nfunction decodeMultiResult(result) {\n  var r = result;\n  if (r === -1) {\n    return {\n      isDnf: true\n    };\n  }\n  if (r === -2) {\n    return {\n      isDns: true\n    };\n  }\n  return r.toString().length === 10 ? decodeOldMultiResult(result) : decodeNewMultiResult(result);\n}\nexports.decodeMultiResult = decodeMultiResult;\n/**\n * Encodes new style multiblind result\n */\nfunction encodeMultiResult(result) {\n  if (isDnfMultiResult(result)) return -1;\n  if (isDnsMultiResult(result)) return -2;\n  if (isMultiResultDnf(result)) return -1;\n  var missed = result.attempted - result.solved;\n  var dd = 99 - (result.solved - missed);\n  var tt = Math.round((result.centiseconds || 9999900) / 100); // multi results are always rounded to seconds, 99999 is used for 'unknown'\n  return dd * 10000000 + tt * 100 + missed;\n}\nexports.encodeMultiResult = encodeMultiResult;\nfunction isMultiResultDnf(result) {\n  if (isDnfMultiResult(result)) return true;\n  if (isDnsMultiResult(result)) return true;\n  if (result.solved < 2) return true;\n  var solved = result.solved;\n  var notSolved = result.attempted - solved;\n  if (solved - notSolved < 0) return true;\n  return false;\n}\nexports.isMultiResultDnf = isMultiResultDnf;\nfunction formatMultiResult(result) {\n  if (isDnfMultiResult(result)) return 'DNF';\n  if (isDnsMultiResult(result)) return 'DNS';\n  if (isMultiResultDnf(result)) return 'DNF';\n  var formatted = result.solved + \"/\" + result.attempted;\n  if (result.centiseconds && result.centiseconds !== 9999900) {\n    var fcs = time_1.formatCentiseconds(result.centiseconds);\n    formatted += \" \" + fcs.substring(0, fcs.length - 3); // chop off the decimal part\n  }\n\n  return formatted;\n}\nexports.formatMultiResult = formatMultiResult;\nfunction isDnfMultiResult(result) {\n  return result.hasOwnProperty('isDnf');\n}\nfunction isDnsMultiResult(result) {\n  return result.hasOwnProperty('isDns');\n}\nfunction decodeOldMultiResult(result) {\n  // Handles DNF and DNS\n  if (result <= 0) return {\n    solved: 0,\n    attempted: 0,\n    centiseconds: result\n  };\n  var seconds = result % 1e5;\n  var AA = Math.floor(result / 1e5) % 100;\n  var SS = Math.floor(result / 1e7) % 100;\n  var solved = 99 - SS;\n  var res = {\n    solved: solved,\n    attempted: AA\n  };\n  if (seconds < 99999) {\n    res.centiseconds = seconds * 100;\n  }\n  return res;\n}\nfunction decodeNewMultiResult(result) {\n  // Handles DNF and DNS\n  if (result <= 0) return {\n    solved: 0,\n    attempted: 0,\n    centiseconds: result\n  };\n  var missed = result % 100;\n  var seconds = Math.floor(result / 100) % 1e5;\n  var points = 99 - Math.floor(result / 1e7) % 100;\n  var solved = points + missed;\n  var attempted = solved + missed;\n  var res = {\n    solved: solved,\n    attempted: attempted\n  };\n  if (seconds < 99999) {\n    res.centiseconds = seconds * 100;\n  }\n  return res;\n}\n//# sourceMappingURL=result.js.map","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}