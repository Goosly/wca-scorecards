{"ast":null,"code":"import { Event, formatCentiseconds, getEventName, Result, Round } from '@wca/helpers';\nimport { Helpers } from './helpers';\nimport * as i0 from \"@angular/core\";\nvar ScoreCardService = /** @class */function () {\n  function ScoreCardService() {\n    this.SCORE_CARD_RESULT_WIDTH = 145;\n  }\n  ScoreCardService.prototype.addEmptyScoreCardsUntilPageIsFull = function (scorecards, wcif) {\n    while ((scorecards.length + 1) % 4 !== 0) {\n      scorecards.push(this.getEmptyScoreCard(wcif));\n    }\n  };\n  ScoreCardService.prototype.printScoreCardsForRound = function (wcif, event, roundNumber, config) {\n    var _this = this;\n    var scorecards = [];\n    var round = event.rounds[roundNumber];\n    if (roundNumber !== 0) {\n      this.enrichWithRankingFromPreviousRound(round.results, roundNumber - 1, wcif, event);\n      this.sortByRankingFromPreviousRound(round.results);\n    }\n    round.results.forEach(function (r, i) {\n      var scorecard = _this.getScoreCardForEvent(wcif, event, roundNumber);\n      scorecard.competitorName = Helpers.nameOfCompetitor(wcif, r.personId);\n      scorecard.competitorId = r.personId;\n      if (roundNumber !== 0) {\n        scorecard.group = Math.floor(i * config.numberOfGroups / round.results.length) + 1;\n        scorecard.totalGroups = config.numberOfGroups;\n        scorecard.ranking = r['rankingPreviousRound'];\n      }\n      scorecards.push(scorecard);\n    });\n    if (roundNumber === 0) {\n      scorecards = this.sortScoreCardsByName(scorecards);\n    }\n    if (config.printStationNumbers) {\n      this.enrichWithStationNumbers(scorecards);\n    }\n    this.addEmptyScoreCardsUntilPageIsFull(scorecards, wcif);\n    this.print(wcif, scorecards);\n  };\n  ScoreCardService.prototype.enrichWithStationNumbers = function (scorecardsForEvent) {\n    var stationCounter = 0;\n    var group = scorecardsForEvent[0].group;\n    scorecardsForEvent.forEach(function (s, i) {\n      if (s.group == group) {\n        stationCounter++;\n      } else {\n        stationCounter = 1;\n        group++;\n      }\n      s.timerStationId = stationCounter;\n    });\n  };\n  ScoreCardService.prototype.enrichWithRankingFromPreviousRound = function (results, previousRoundNumber, wcif, event) {\n    results.forEach(function (r) {\n      r['rankingPreviousRound'] = event.rounds[previousRoundNumber].results.filter(function (pr) {\n        return pr.personId === r.personId;\n      })[0].ranking;\n    });\n  };\n  ScoreCardService.prototype.sortByRankingFromPreviousRound = function (results) {\n    results.sort(function (a, b) {\n      return a['rankingPreviousRound'] - b['rankingPreviousRound'];\n    });\n  };\n  ScoreCardService.prototype.getScoreCardForEvent = function (wcif, event, roundNumber) {\n    return {\n      eventId: event.id,\n      competitionName: wcif.name,\n      eventName: getEventName(event.id),\n      round: roundNumber + 1,\n      group: 1,\n      totalGroups: 1,\n      competitorId: null,\n      competitorName: null,\n      timeLimit: this.getTimeLimitOf(event.rounds[roundNumber]),\n      cumulative: this.getCumulative(event.rounds[roundNumber]),\n      cutoff: this.getCutoffOf(event.rounds[roundNumber]),\n      ranking: null,\n      timerStationId: null\n    };\n  };\n  ScoreCardService.prototype.getTimeLimitOf = function (round) {\n    if (round === null || round.timeLimit === null) {\n      return null;\n    } else {\n      return formatCentiseconds(round.timeLimit.centiseconds);\n    }\n  };\n  ScoreCardService.prototype.getCumulative = function (round) {\n    if (round === null || round.timeLimit === null || round.timeLimit.cumulativeRoundIds === null) {\n      return false;\n    } else {\n      return round.timeLimit.cumulativeRoundIds.length > 0;\n    }\n  };\n  ScoreCardService.prototype.getCutoffOf = function (round) {\n    if (round === null || round.cutoff === null) {\n      return null;\n    } else if (typeof round.cutoff.attemptResult === 'string') {\n      return round.cutoff.attemptResult;\n    } else {\n      return formatCentiseconds(round.cutoff.attemptResult);\n    }\n  };\n  ScoreCardService.prototype.printFourEmptyScorecards = function (wcif) {\n    var scorecards = [this.getEmptyScoreCard(wcif), this.getEmptyScoreCard(wcif), this.getEmptyScoreCard(wcif), this.getEmptyScoreCard(wcif)];\n    pdfMake.createPdf(this.document(scorecards)).download('emptyScorecards-' + wcif.id + '.pdf');\n  };\n  ScoreCardService.prototype.getEmptyScoreCard = function (wcif) {\n    return {\n      eventId: ' ',\n      competitionName: wcif.name,\n      eventName: ' ',\n      round: null,\n      group: null,\n      totalGroups: null,\n      competitorId: null,\n      competitorName: ' ',\n      timeLimit: null,\n      cumulative: false,\n      cutoff: null,\n      ranking: null,\n      timerStationId: null\n    };\n  };\n  ScoreCardService.prototype.print = function (wcif, scorecards) {\n    if (scorecards.length === 0) {\n      alert('Something went wrong: trying to print zero scorecards');\n    } else {\n      pdfMake.createPdf(this.document(scorecards)).download('scorecards-' + wcif.id + '.pdf');\n    }\n  };\n  ScoreCardService.prototype.document = function (scorecards) {\n    var document = {\n      content: [],\n      styles: {},\n      defaultStyle: {\n        fontSize: 12\n      }\n    };\n    for (var i = -1; i < scorecards.length; i += 4) {\n      var onePage = [[{\n        stack: i === -1 ? this.getSummary(scorecards) : this.getScoreCardTemplate(scorecards[i]),\n        border: [false, false, false, false]\n      }, {\n        text: '',\n        border: [false, false, false, false]\n      }, {\n        text: '',\n        border: [true, false, false, false]\n      }, {\n        stack: this.getScoreCardTemplate(scorecards[i + 1]),\n        border: [false, false, false, false]\n      }], [{\n        text: '',\n        border: [false, true, false, false]\n      }, {\n        text: '',\n        border: [false, true, false, false]\n      }, {\n        text: '',\n        border: [true, true, false, false]\n      }, {\n        text: '',\n        border: [false, true, false, false]\n      }], [{\n        stack: this.getScoreCardTemplate(scorecards[i + 2]),\n        border: [false, false, false, false]\n      }, {\n        text: '',\n        border: [false, false, false, false]\n      }, {\n        text: '',\n        border: [true, false, false, false]\n      }, {\n        stack: this.getScoreCardTemplate(scorecards[i + 3]),\n        border: [false, false, false, false]\n      }]];\n      var page = {\n        table: {\n          heights: [384, 22, 364],\n          widths: [260, 2, 8, 260],\n          body: onePage\n        },\n        layout: {\n          hLineColor: function (i, node) {\n            return '#d3d3d3';\n          },\n          vLineColor: function (i, node) {\n            return '#d3d3d3';\n          }\n        },\n        margin: [-20, -10],\n        pageBreak: 'after'\n      };\n      document.content.push(page);\n    }\n    document.content[document.content.length - 1].pageBreak = null;\n    return document;\n  };\n  ScoreCardService.prototype.getScoreCardTemplate = function (info) {\n    if ('333mbf' === info.eventId) {\n      return this.oneMbldScoreCard(info);\n    } else if (['666', '777', '333bf', '444bf', '555bf'].includes(info.eventId)) {\n      return this.oneMo3ScoreCard(info);\n    }\n    return this.oneAvg5ScoreCard(info);\n  };\n  ScoreCardService.prototype.oneMo3ScoreCard = function (info) {\n    return [[{\n      text: !info.timerStationId ? '' : 'Timer ' + info.timerStationId,\n      alignment: 'right',\n      fontSize: 9\n    }, {\n      text: info.competitionName,\n      alignment: 'center',\n      fontSize: 10\n    }], {\n      text: info.eventName,\n      alignment: 'center',\n      fontSize: 18,\n      bold: true\n    }, this.roundGroupAndRankingInfo(info), {\n      table: {\n        widths: [30, this.SCORE_CARD_RESULT_WIDTH + 58],\n        body: [[{\n          text: info.competitorId === null ? ' ' : info.competitorId,\n          fontSize: 16,\n          alignment: 'center'\n        }, {\n          text: info.competitorName,\n          fontSize: 16,\n          alignment: 'center'\n        }]]\n      },\n      margin: [0, 5]\n    }, {\n      text: info.cumulative ? 'Also write down the time for a DNF!' : '',\n      bold: true,\n      alignment: 'center'\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: ''\n        }, {\n          text: 'S',\n          alignment: 'center'\n        }, {\n          text: info.cumulative ? 'Result\\n(Cumulative limit: ' + info.timeLimit + ')' : info.timeLimit !== null ? 'Result (DNF if â‰¥ ' + info.timeLimit + ')' : '',\n          alignment: 'center',\n          fontSize: info.cumulative ? 10 : 12\n        }, {\n          text: 'J',\n          alignment: 'center'\n        }, {\n          text: 'C',\n          alignment: 'center'\n        }], [{\n          text: '1',\n          margin: [0, 7]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }, {\n      text: info.cutoff !== null ? '-------------- Continue if 1 < ' + info.cutoff + ' --------------' : '',\n      alignment: 'center',\n      fontSize: 10\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: '2',\n          margin: [0, 7]\n        }, '', '', '', ''], [{\n          text: '3',\n          margin: [0, 7]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }, {\n      text: '-------------- Extra or provisional --------------',\n      alignment: 'center',\n      fontSize: 10\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: 'E',\n          margin: [0, 5]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }];\n  };\n  ScoreCardService.prototype.oneAvg5ScoreCard = function (info) {\n    return [[{\n      text: !info.timerStationId ? '' : 'Timer ' + info.timerStationId,\n      alignment: 'right',\n      fontSize: 9\n    }, {\n      text: info.competitionName,\n      alignment: 'center',\n      fontSize: 10\n    }], {\n      text: info.eventName,\n      alignment: 'center',\n      fontSize: 18,\n      bold: true\n    }, this.roundGroupAndRankingInfo(info), {\n      table: {\n        widths: [30, this.SCORE_CARD_RESULT_WIDTH + 58],\n        body: [[{\n          text: info.competitorId === null ? ' ' : info.competitorId,\n          fontSize: 16,\n          alignment: 'center'\n        }, {\n          text: info.competitorName,\n          fontSize: 16,\n          alignment: 'center'\n        }]]\n      },\n      margin: [0, 5]\n    }, {\n      text: info.cumulative ? 'Also write down the time for a DNF!' : '',\n      bold: true,\n      alignment: 'center'\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: ''\n        }, {\n          text: 'S',\n          alignment: 'center'\n        }, {\n          text: info.cumulative ? 'Result\\n(Cumulative limit: ' + info.timeLimit + ')' : info.timeLimit !== null ? 'Result (DNF if â‰¥ ' + info.timeLimit + ')' : '',\n          alignment: 'center',\n          fontSize: info.cumulative ? 10 : 12\n        }, {\n          text: 'J',\n          alignment: 'center'\n        }, {\n          text: 'C',\n          alignment: 'center'\n        }], [{\n          text: '1',\n          margin: [0, 7]\n        }, '', '', '', ''], [{\n          text: '2',\n          margin: [0, 7]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }, {\n      text: info.cutoff !== null ? '-------------- Continue if 1 or 2 < ' + info.cutoff + ' --------------' : '',\n      alignment: 'center',\n      fontSize: 10\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: '3',\n          margin: [0, 7]\n        }, '', '', '', ''], [{\n          text: '4',\n          margin: [0, 7]\n        }, '', '', '', ''], [{\n          text: '5',\n          margin: [0, 7]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }, {\n      text: '-------------- Extra or provisional --------------',\n      alignment: 'center',\n      fontSize: 10\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: 'E',\n          margin: [0, 5]\n        }, '', '', '', '']]\n      },\n      margin: [0, 2]\n    }];\n  };\n  ScoreCardService.prototype.oneMbldScoreCard = function (info) {\n    return [[{\n      text: !info.timerStationId ? '' : 'Timer ' + info.timerStationId,\n      alignment: 'right',\n      fontSize: 9\n    }, {\n      text: info.competitionName,\n      alignment: 'center',\n      fontSize: 10\n    }], {\n      text: info.eventName,\n      alignment: 'center',\n      fontSize: 18,\n      bold: true\n    }, this.roundGroupAndRankingInfo(info), {\n      table: {\n        widths: [30, this.SCORE_CARD_RESULT_WIDTH + 58],\n        body: [[{\n          text: info.competitorId === null ? ' ' : info.competitorId,\n          fontSize: 16,\n          alignment: 'center'\n        }, {\n          text: info.competitorName,\n          fontSize: 16,\n          alignment: 'center'\n        }]]\n      },\n      margin: [0, 5]\n    }, {\n      text: 'Count and write down the number of cubes before the attempt starts',\n      bold: true,\n      alignment: 'center'\n    }, {\n      table: {\n        widths: [5, 16, this.SCORE_CARD_RESULT_WIDTH, 20, 20],\n        body: [[{\n          text: ''\n        }, {\n          text: 'S',\n          alignment: 'center'\n        }, {\n          text: 'Result',\n          alignment: 'center'\n        }, {\n          text: 'J',\n          alignment: 'center'\n        }, {\n          text: 'C',\n          alignment: 'center'\n        }], [{\n          text: '1',\n          margin: [0, 7]\n        }, '', {\n          text: '_______ / _______\\n\\nTime:',\n          margin: [0, 7]\n        }, '', ''], [{\n          text: '2',\n          margin: [0, 7]\n        }, '', {\n          text: '_______ / _______\\n\\nTime:',\n          margin: [0, 7]\n        }, '', ''], [{\n          text: '3',\n          margin: [0, 7]\n        }, '', {\n          text: '_______ / _______\\n\\nTime:',\n          margin: [0, 7]\n        }, '', '']]\n      },\n      margin: [0, 2]\n    }];\n  };\n  ScoreCardService.prototype.roundGroupAndRankingInfo = function (info) {\n    return {\n      text: 'Round ' + (info.round === null ? '    ' : info.round) + ' | Group ' + (info.group === null ? '    ' : info.group) + ' of ' + (info.totalGroups === null ? '    ' : info.totalGroups) + (info.ranking === null ? '' : ' | Ranking: ' + info.ranking),\n      alignment: 'center',\n      fontSize: 10\n    };\n  };\n  ScoreCardService.prototype.sortScoreCardsByName = function (scorecards) {\n    return scorecards.sort(function (a, b) {\n      var textA = a.competitorName.toUpperCase();\n      var textB = b.competitorName.toUpperCase();\n      return textA < textB ? -1 : textA > textB ? 1 : 0;\n    });\n  };\n  ScoreCardService.prototype.getSummary = function (scorecards) {\n    var groups = new Set(scorecards.map(function (s) {\n      return s.group;\n    }));\n    console.log('groups: ' + groups);\n    var list = '';\n    groups.forEach(function (group) {\n      var lowestRanking = Math.min.apply(Math, scorecards.filter(function (s) {\n        return s.group === group;\n      }).map(function (s) {\n        return s.ranking;\n      }));\n      var highestRanking = Math.max.apply(Math, scorecards.filter(function (s) {\n        return s.group === group;\n      }).map(function (s) {\n        return s.ranking;\n      }));\n      list += \"Group \".concat(group, \": ranking \").concat(lowestRanking, \" to \").concat(highestRanking, \"\\n\");\n    });\n    return {\n      text: 'Summary\\n' + 'Give this to the announcer, so they can clearly announce the groups to the competitors\\n' + list\n    };\n  };\n  ScoreCardService.Éµfac = function ScoreCardService_Factory(t) {\n    return new (t || ScoreCardService)();\n  };\n  ScoreCardService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n    token: ScoreCardService,\n    factory: ScoreCardService.Éµfac,\n    providedIn: 'root'\n  });\n  return ScoreCardService;\n}();\nexport { ScoreCardService };\nvar ScoreCardInfo = /** @class */function () {\n  function ScoreCardInfo() {}\n  return ScoreCardInfo;\n}();\nexport { ScoreCardInfo };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}